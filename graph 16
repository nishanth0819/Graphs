#include <iostream>
#include<queue>
#include<vector>
#include<climits>
using namespace std;
void dijkstra(vector<pair<int,int>> adj[],int n,int src)
{
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    vector<int> dis(n,INT_MAX);
    dis[src]=0;
    pq.push(make_pair(0,src));
    while(pq.empty()==false)
    {
        int neardist=pq.top().first;
        int prev=pq.top().second;
        pq.pop();
        for(auto node:adj[prev])
        {
            if(dis[prev]+node.second<dis[node.first])
            {
                dis[node.first]=dis[prev]+node.second;
                pq.push(make_pair(dis[node.first],node.first));
            }
        }
    }
    for(int i=0;i<dis.size();i++)
    {
        cout<<dis[i]<<" ";
    }
}
int main()
{
    int m,n;
    cin>>m>>n;
    vector<pair<int,int>> adj[m];
    for(int i=0;i<n;i++)
    {
        int u,v,wt;
        cin>>u>>v>>wt;
        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
    }
    dijkstra(adj,m,0);
}
